name: 'Deploy Blazor App To Azure'
on:
  workflow_call:
    inputs:
      PACKAGE_PATH: # the path to your web app project
        type: string
        description:  'the path to your web app project, defaults to the repository root'
        required: false
        default: '.'
      DOTNET_VERSION: 
        type: string
        description: 'the dotnet version to use'
        required: false
        default: '6.0.x' 
      BUILD_CONFIGURATION: 
        type: string
        description: 'the build configuration - defaults to Release'
        required: false
        default: 'Release' 
      APP_BUILD_FILE: # the blazor app project file to build.
        type: string
        required: true
        description: 'the blazor app project file to build'
      API_BUILD_FILE: # the api project file to build.
        type: string
        required: false
        description: 'the api project file to build'
      ENVIRONMENT: # the name of the environment that the deployment relates to.
        type: string
        required: true
        description: 'The name of the environment that the deployment relates to'
      BLAZOR_ENVIRONMENT: # the name of the blazor environment that the deployment relates to.
        type: string
        required: true
        description: 'The name of the blazor environment that the deployment relates to'
      WEB_APP_NAME: # the name of the blazor app to deploy to.
        type: string
        required: true
        description: 'the name of the blazor app to deploy to.'
      FUNCTION_APP_NAME: # the name of the api function app to deploy to.
        type: string
        required: true
        description: 'the name of the api function app to deploy to.'
    secrets:
      AZURE_PUBLISH_SECRET:
        required: true
      TF_API_TOKEN:
        required: true
jobs:
  plan-infrastructure:
    name: 'Plan Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-deploy/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    #   working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

  deploy-infrastructure:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: plan-infrastructure
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-deploy/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

      # build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

  build-app:
    name: Build App
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build '${{ inputs.APP_BUILD_FILE }}' --configuration ${{ inputs.BUILD_CONFIGURATION }}

      - name: dotnet publish 
        run: dotnet publish '${{ inputs.APP_BUILD_FILE }}' -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Move environment config file over web config file.
        run: cp ${{env.DOTNET_ROOT}}/myapp/web.${{ inputs.BLAZOR_ENVIRONMENT }}.config ${{env.DOTNET_ROOT}}/myapp/web.config

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy-app:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: build-app
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_PUBLISH_SECRET }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.WEB_APP_NAME }}
          package: ${{ inputs.PACKAGE_PATH }}

  deploy-api:
    name: Deploy Api
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup DotNet ${{ inputs.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ inputs.PACKAGE_PATH }}'
          dotnet build ${{ inputs.API_BUILD_FILE }} --configuration Release --output ./output
          popd
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_PUBLISH_SECRET }}

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: '${{ inputs.FUNCTION_APP_NAME }}'
          slot-name: 'production'
          package: '${{ inputs.PACKAGE_PATH }}/output'

  plan-configure-infrastructure:
    name: 'Plan Configuration'
    runs-on: ubuntu-latest
    if: ${{ always() && !failure() }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: [ deploy-app, deploy-api ]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-configure/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    #   working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure      

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

  deploy-configure-infrastructure:
    if: ${{ always() && !failure() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    needs: plan-configure-infrastructure
    name: 'Deploy Configuration'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-configure/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

      # build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure
