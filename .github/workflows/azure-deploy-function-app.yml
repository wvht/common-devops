name: 'Deploy Function App To Azure'
on:
  workflow_call:
    inputs:
      AZURE_FUNCTIONAPP_PACKAGE_PATH: # the path to your web app project
        type: string
        description:  'the path to your web app project, defaults to the repository root'
        required: false
        default: '.'
      DOTNET_VERSION: 
        type: string
        description: 'the dotnet version to use'
        required: false
        default: '6.0.x' 
      BUILD_FILE: # the project file to build.
        type: string
        required: true
        description: 'the project file to build'
      DEPLOY_DATA_REPLICATION: 
        type: boolean
        required: false
        description: 'flag to determine whether to build and deploy the data replication function.'
        default: false
      DATA_REPLICATION_BUILD_FILE: # the data replication project file to build.
        type: string
        required: false
        description: 'the data replication project file to build'
      DEPLOY_INTEGRATION: 
        type: boolean
        required: false
        description: 'flag to determine whether to build and deploy the integration function.'
        default: false
      INTEGRATION_BUILD_FILE: # the data replication project file to build.
        type: string
        required: false
        description: 'the integration project file to build'
      FUNCTION_APP_NAME: # the name of the function app to deploy to.
        type: string
        required: true
        description: 'the name of the azure function app to deploy to.'
      ENVIRONMENT:
        type: string
        required: true
        description: 'the indentifier of the environment in use.'
    secrets:
      AZURE_PUBLISH_SECRET:
        required: true
      TF_API_TOKEN:
        required: true
jobs:

  # JOB to run change detection
  changes:
    name: 'Detect Changes'
    runs-on: ubuntu-latest
    # Required permissions
    environment: ${{ inputs.ENVIRONMENT }}
    # Set job outputs to values from filter step
    outputs:
      infrastucture: ${{ steps.filter.outputs.infrastructure }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check Path
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          infrastructure:
            - 'terraform/**'

  plan-infrastructure:
    name: 'Plan Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-deploy/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    #   working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

  deploy-infrastructure:
    needs: [plan-infrastructure, changes]
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.changes.outputs.infrastructure == 'true'
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-deploy/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

      # build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-deploy

  build-and-deploy:
    name: Deploy Code
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup DotNet ${{ inputs.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build ${{ inputs.BUILD_FILE }} --configuration Release --output ./output
          popd
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_PUBLISH_SECRET }}

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: '${{ inputs.FUNCTION_APP_NAME }}'
          slot-name: 'production'
          package: '${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
    needs: deploy-infrastructure

  build-and-deploy-integration:
    name: Deploy Integration Code
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    needs: deploy-infrastructure
    if: ${{ inputs.DEPLOY_INTEGRATION }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup DotNet ${{ inputs.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build ${{ inputs.INTEGRATION_BUILD_FILE }} --configuration Release --output ./output
          popd
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_PUBLISH_SECRET }}

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: '${{ inputs.FUNCTION_APP_NAME }}-integration'
          slot-name: 'production'
          package: '${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

  build-and-deploy-data-rep:
    name: Deploy Data Replication
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    if: ${{ inputs.DEPLOY_DATA_REPLICATION }}
    needs: deploy-infrastructure
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup DotNet ${{ inputs.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build ${{ inputs.DATA_REPLICATION_BUILD_FILE }} --configuration Release --output ./output
          popd
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_PUBLISH_SECRET }}

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: '${{ inputs.FUNCTION_APP_NAME }}-replication'
          slot-name: 'production'
          package: '${{ inputs.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

  plan-configure-infrastructure:
    name: 'Plan Configuration'
    runs-on: ubuntu-latest
    if: ${{ always() && !failure() }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: [ build-and-deploy, build-and-deploy-data-rep , build-and-deploy-integration ]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-configure/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    #   working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure      

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

  deploy-configure-infrastructure:
    needs: [plan-configure-infrastructure, changes]
    if: ${{ always() && !failure() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.changes.outputs.infrastructure == 'true' }}
    name: 'Deploy Configuration'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Copy the modules folder into the working directory
    - name: Copy Modules
      run: cp -R ./terraform/modules ./terraform/${{ inputs.ENVIRONMENT }}-configure/modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure

      # build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform/${{ inputs.ENVIRONMENT }}-configure
